new_info <- function(filepath, levels = 1){
# Split up the file path and go up the specified number of levels
splitfp <- strsplit(filepath,"/")
dirname <- splitfp[[1]][(length(splitfp[[1]]) - levels)]
# Check if the direcory name is provides the correct information
if (!grepl("[0-9]{8}_[A-Za-z]+[0-9]*[a-z]{0,1}", dirname)) {
warning("Directory name does not match predefined structure. Information about the date, name, round , and assay of the experiment has been set to NA. This may be an issue with the number of levels up from the individual file.")
date <- NA
experiment <- NA
round <- NA
assay <- NA
} else {
# Pull out the date
date <- strsplit(dirname,"_")[[1]][1]
# Get the string with all of the experiment details
details <- strsplit(dirname,"_")[[1]][2]
# Get the experiment name, round number, and assay value
experiment <- strsplit(details,"[0-9]+")[[1]][1]
round <- as.numeric(strsplit(details,"(?i)[a-z]+")[[1]][2])
assay <- strsplit(details,"[0-9]+")[[1]][2]
}
# Check to see if the file name is the correct structure
filename <- splitfp[[1]][(length(splitfp[[1]]))]
if (!grepl("p[0-9]{2}_([0-9a-zA-Z-]*_){2,}[0-9a-zA-Z-]*.txt",
filename)) {
stop("File name does not conform to the standard 'pXX_straintemplate_conditiontemplate_controltemplate.txt'")
}
# Split the file name and get the plate number
split <- strsplit(filename, "_")[[1]]
plate <- as.numeric(strsplit(split[1], "p")[[1]][2])
# Get the template info from the file name
straintemplate <- split[2]
conditiontemplate <- split[3]
controltemplate <- strsplit(split[4], "\\.")[[1]][1]
# Return all of the information as a data frame
frame <- data.frame(date, experiment, round, assay, plate, straintemplate,
conditiontemplate, controltemplate)
return(frame)
}
new_info <- function(filepath, levels = 1){
# Split up the file path and go up the specified number of levels
splitfp <- strsplit(filepath,"/")
dirname <- splitfp[[1]][(length(splitfp[[1]]) - levels)]
# Check if the direcory name is provides the correct information
if (!grepl("[0-9]{8}_[A-Za-z]+[0-9]*[a-z]{0,1}", dirname)) {
warning("Directory name does not match predefined structure. Information about the date, name, round , and assay of the experiment has been set to NA. This may be an issue with the number of levels up from the individual file.")
date <- NA
experiment <- NA
round <- NA
assay <- NA
} else {
# Pull out the date
date <- strsplit(dirname,"_")[[1]][1]
# Get the string with all of the experiment details
details <- strsplit(dirname,"_")[[1]][2]
# Get the experiment name, round number, and assay value
experiment <- strsplit(details,"[0-9]+")[[1]][1]
round <- as.numeric(strsplit(details,"(?i)[a-z]+")[[1]][2])
assay <- strsplit(details,"[0-9]+")[[1]][2]
}
# Check to see if the file name is the correct structure
filename <- splitfp[[1]][(length(splitfp[[1]]))]
if (!grepl("p[0-9]{2}_([0-9a-zA-Z-]*_){2,}[0-9a-zA-Z-]*.txt",
filename)) {
stop("File name does not conform to the standard 'pXX_straintemplate_conditiontemplate_controltemplate.txt'")
}
# Split the file name and get the plate number
split <- strsplit(filename, "_")[[1]]
plate <- as.numeric(strsplit(split[1], "p")[[1]][2])
# Get the template info from the file name
straintemplate <- split[2]
conditiontemplate <- split[3]
controltemplate <- strsplit(split[4], "\\.")[[1]][1]
# Return all of the information as a data frame
frame <- data.frame(date, experiment, round, assay, plate, straintemplate,
conditiontemplate, controltemplate)
return(frame)
}
read_data <- function(filedir, tofmin = 60, tofmax = 2000, extmin = 0,
extmax = 10000, SVM = TRUE, levels = 2) {
# If the directory is a list of directories, call read_data for all of the
# directories in the list
if(length(filedir) > 1) {
data <- lapply(filedir, function(x) {read_data(x,
tofmin,
tofmax,
extmin,
extmax,
SVM,
levels)})
return(data)
} else {
# NOTE: 'The next two lines were added to get known issue with
# dplyr::left_join treating character NAs incorrectly. This is currently
# (6/9/2015) issue number 965 for the dplyr package. It should be corrected
# in dplyr version 0.5. At that time, remove the two lines below as well as
# the reseting of the option at the end of the function and test the
# function to ensure that the strain names are still present after the point
# of the final in bamf_prune.
saf <- getOption("stringsAsFactors")
options(stringsAsFactors = TRUE)
# Remove trailing '/' if present in the file path
if (grepl("/$", filedir)){
filedir <- substr(filedir, 1, nchar(filedir) - 1)
}
# If an individual file is given, read it in
if (length(dir(filedir)) == 0){
data <- read_file(filedir, tofmin, tofmax, extmin, extmax, SVM, levels)
} else if ("score" %in% dir(filedir) & "setup" %in% dir(filedir)) {
# If both setup and score directories are subdirectories of the given
# directory, read in both directories and return them as a list
scorepath <- file.path(filedir, "score")
setuppath <- file.path(filedir, "setup")
# If the 'no files in directory' error is thrown by read_directory,
# make it a bit more specific when it is thrown from read_data
score <- read_directory(scorepath, tofmin, tofmax, extmin, extmax, SVM,
levels)
setup <- read_directory(setuppath, tofmin, tofmax, extmin, extmax, SVM,
levels)
data <- list(score, setup)
} else if ("score" %in% dir(filedir) & !("setup" %in% dir(filedir))) {
# If in an experiment directory but there is no setup directory, read in
# everything from the score directory
scorepath <- file.path(filedir, "score")
score <- read_directory(scorepath, tofmin, tofmax, extmin, extmax, SVM,
levels)
data <- score
} else {
# Otherwise, just read in the given directory
data <- read_directory(filedir, tofmin, tofmax, extmin, extmax, SVM,
levels)
}
# NOTE: Remove the following line after dplyr updates to > v0.5.
options(stringsAsFactors = saf)
return(data)
}
}
read_directory <- function(directory, tofmin = 60, tofmax = 2000, extmin = 0,
extmax = 10000, SVM = TRUE, levels = 2) {
# Get all of the txt files from adirectory and read them in individually.
# Then rbind them and return a data frame.
dirfiles <- dir(directory)
files <- subset(dirfiles, grepl(".txt$", dirfiles))
# Throw an error if there are no files in the given directory
if (length(files) == 0) stop("There are no text files in the given directory.")
filepaths <- file.path(directory, files)
plates <- lapply(filepaths, function(x){
read_file(x, tofmin, tofmax, extmin, extmax,
SVM, levels)
})
data <- do.call(rbind, plates)
return(data)
}
read_file <- function(file, tofmin = 60, tofmax = 2000, extmin = 0,
extmax = 10000, SVM = TRUE, levels = 2){
# Read the raw sorter files and make the row names
plate <- readSorter(file, tofmin, tofmax, extmin, extmax)
modplate <- with(plate,
data.frame(row=Row,
col=as.factor(Column),
sort=Status.sort,
TOF=TOF,
EXT=EXT,
time=Time.Stamp,
green=Green,
yellow=Yellow,
red=Red))
# Extract the time so that it is realtive to the first worm sorted
modplate <- modplate %>%
dplyr::group_by(row, col) %>%
dplyr::do(COPASutils::extractTime(.))
modplate <- data.frame(modplate)
# Normalize the optical values by time of flight
modplate[, 10:13] <- apply(modplate[, c(5, 7:9)], 2,
function(x) x / modplate$TOF)
colnames(modplate)[10:13] <- c("norm.EXT", "norm.green", "norm.yellow",
"norm.red")
# Handle the SVM predictions if requested
if(SVM){
plateprediction <- kernlab::predict(
COPASutils::bubbleSVMmodel_noProfiler,
modplate[,3:length(modplate)],
type="probabilities")
modplate$object <- plateprediction[, "1"]
modplate$call50 <- factor(as.numeric(modplate$object > 0.5),
levels=c(1, 0), labels=c("object", "bubble"))
}
# Calculate the life stage values based on the size of the worms
modplate$stage <- ifelse(modplate$TOF >= 60 & modplate$TOF < 90, "L1",
ifelse(modplate$TOF >= 90 & modplate$TOF < 200,
"L2/L3",
ifelse(modplate$TOF >= 200
& modplate$TOF < 300, "L4",
ifelse(modplate$TOF >= 300,
"adult", NA))))
# Convert integer values to numerics
modplate[, as.vector(which(lapply(modplate, class) == "integer"))] <- lapply(
modplate[, as.vector(which(lapply(modplate, class) == "integer"))],
as.numeric)
# Get info about the plate using the new_info function
plateinfo <- new_info(file, levels)
# Get the template base directory
templatedir <- strsplit(file, "/")[[1]]
templatedir <- templatedir[-c(length(templatedir), length(templatedir) - 1)]
templatedir <- paste0(templatedir, collapse = "/")
templatedir <- paste0(templatedir, "/")
# Get the template file paths
strainsfile <- paste0(templatedir, "strains/",
plateinfo$straintemplate[1], ".csv")
conditionsfile <- paste0(templatedir, "conditions/",
plateinfo$conditiontemplate[1],
".csv")
controlsfile <- paste0(templatedir, "controls/",
plateinfo$controltemplate[1], ".csv")
contamfile <- paste0(templatedir,
"contamination/",
sprintf("p%02d", plateinfo$plate[1]),
"_contamination.csv")
# Read all of the templates
strains <- read_template(strainsfile, type="strains")
conditions  <- read_template(conditionsfile, type="conditions")
controls <- read_template(controlsfile, type="controls")
contam <- read_template(contamfile, type="contam")
# Join all of the metadata and template info to the plate data
modplate <- cbind(plateinfo[,1:5], modplate)
modplate <- dplyr::left_join(modplate, strains, by = c("row", "col"))
modplate <- dplyr::left_join(modplate, conditions, by = c("row", "col"))
modplate <- dplyr::left_join(modplate, controls, by = c("row", "col"))
modplate <- dplyr::left_join(modplate, contam, by = c("row", "col"))
return(modplate)
}
read_template <- function(templatefile, type){
if (!file.exists(templatefile)) {
stop(paste("The", type, "template file at", templatefile, "could not be
found. Please check to ensure that file exists and is in the
right directory structure, then try again."))
}
# Read in the teamplate file and melt it with tidyr
template <- read.csv(templatefile, check.names=FALSE)
template <- template[,!colnames(template)==""]
melttemplate <- tidyr::gather(template, col, variable, -row)
# Change the column names based on the type of template and return the data
if(type == "strains"){
colnames(melttemplate) <- c("row", "col", "strain")
} else if (type == "conditions"){
colnames(melttemplate) <- c("row", "col", "condition")
} else if (type == "controls"){
colnames(melttemplate) <- c("row", "col", "control")
} else if (type == "contam") {
colnames(melttemplate) <- c("row", "col", "contamination")
melttemplate$contamination[is.na(melttemplate$contamination)] <- FALSE
}
return(melttemplate)
}
filedir <- "~/Dropbox/HTA/Results/20170313_doseresponse2a/"
raw <- read_data(filedir)
readSorter <- function(file, tofmin=0, tofmax=10000, extmin=0, extmax=10000, reflx=TRUE)  {
data <- read.delim(file=file, header=T, na.strings=c("n/a"), as.is=T, stringsAsFactors=F)
if(is.null(data$EXT) & reflx){
stop("This file appears to have come from a machine with an LP Sampler, not a ReFLx module. Please set `reflx` = FALSE and try again.")
}
data <- data[!is.na(data$TOF),]
data <- data[,!is.na(data[1,])]
data <- data[(data$TOF>=tofmin & data$TOF<=tofmax) | data$TOF == -1,]
if(reflx){
data <- data[(data$EXT>=extmin & data$EXT<=extmax) | data$EXT == -1,]
data$Column <- as.factor(data$Column)
data$Row <- as.factor(data$Row)
} else {
data <- data[(data$Extinction>=extmin & data$Extinction<=extmax) | data$Extinction == -1,]
data$Column <- as.factor(data$Column)
data$Row <- as.factor(data$Row)
}
#removed the following two lines because in cases where a plate was interrupted during sort/score and two files exist for a certain plate the Row and Column data were defaulting to start at row A and col 1. This messes with plate stitching.
#levels(data$Row) <- LETTERS[1:8]
#levels(data$Column) <- 1:12
return(data)
}
raw <- read_data(filedir)
p03sort <- raw[[2]] %>%
dplyr::filter(plate == 3)
unique(p03sort$row)
libarary(easysorter)
library(easysorter)
noncon <- remove_contamination(raw)
summed <- sumplate(noncom)
summed <- sumplate(noncon)
biopruned <- bioprune(summed)
p03 <- biopruned %>% dplyr::filter(plate == 3)
unique(p03$row)
devtools::document()
library(COPASutils)
devtools::document()
library(COPASutils)
readSorter
COPASutils::readSorter
remove.packages("COPASutils")
devtools::install_github("AndersenLab/COPASutils")
COPASutils::readSorter
library("COPASutils", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
readSorter
load("~/Dropbox/AndersenLab/QTLpaper/data/uniqueQTL_588corrcut.Rda")
textsize = 10
titlesize = 12
threetrait <- uniqueQTL %>%
dplyr::ungroup() %>%
dplyr::group_by(condition, chr) %>%
arrange(condition, chr, ci_l_pos, ci_r_pos) %>%
na.omit() %>%
distinct(chr, trait, condition, .keep_all = T) %>%
mutate(class = NA) %>%
select(-unique, -chrdrugtrait, -drugtrait)
#Add drug class
for(i in 1:nrow(threetrait)) {
if(threetrait$condition[i] %in% c("cadmium", "silver", "cisplatin", "copper")) {
threetrait$class[i] <- "Heavy Metal"
} else if(threetrait$condition[i] %in% c("chlorpyrifos", "deiquat", "paraquat")) {
threetrait$class[i] <- "Pestiside"
} else if(threetrait$condition[i] == "fluoxetine") {
threetrait$class[i] <- "Neuroactive"
} else if(threetrait$condition[i] %in% c("carmustine", "chlorothanilil", "irinotecan", "mechlorethamine", "topotecan", "tunicamycin", "vincristine", "FUdR")) {
threetrait$class[i] <- "Chemotherapeutic"
}
}
#Factor drug class
threetrait$class <- factor(threetrait$class)
threetrait <- threetrait %>%
arrange(class, condition)
threetrait$condition <- factor(threetrait$condition, levels = c("carmustine", "chlorothanilil", "FUdR", "irinotecan", "mechlorethamine", "topotecan", "tunicamycin", "vincristine",
"cadmium", "cisplatin", "copper", "silver", "chlorpyrifos", "deiquat", "paraquat", "fluoxetine"),
labels = c("Carmustine", "Chlorothanilil", "FUdR", "Irinotecan", "Mechlorethamine", "Topotecan", "Tunicamycin", "Vincristine",
"Cadmium", "Cisplatin", "Copper", "Silver", "Chlorpyrifos", "Deiquat", "Paraquat", "Fluoxetine"))
#Set chromosome boundaries
newrows <- threetrait[1,]
newrows[1,] = c(NA,"I",5000000,"q25.EXT",0,NA,NA,NA,NA,NA,1,NA,14972282,"Cadmium", "Heavy Metal")
newrows[2,] = c(NA,"II",5000000,"q25.EXT",0,NA,NA,NA,NA,NA,1,NA,15173999,"Cadmium","Heavy Metal")
newrows[3,] = c(NA,"III",5000000,"q25.EXT",0,NA,NA,NA,NA,NA,1,NA,13829314,"Cadmium","Heavy Metal")
newrows[4,] = c(NA,"IV",5000000,"q25.EXT",0,NA,NA,NA,NA,NA,1,NA,17450860,"Cadmium","Heavy Metal")
newrows[5,] = c(NA,"V",5000000,"q25.EXT",0,NA,NA,NA,NA,NA,1,NA,20914693,"Cadmium","Heavy Metal")
newrows[6,] = c(NA,"X",5000000,"q25.EXT",0,NA,NA,NA,NA,NA,1,NA,17748731,"Cadmium","Heavy Metal")
newrows$ci_l_pos <- as.numeric(newrows$ci_l_pos)
newrows$ci_r_pos <- as.numeric(newrows$ci_r_pos)
newrows$pos <- as.numeric(newrows$pos)
newrows$lod <- as.numeric(newrows$lod)
#Plot
unique_all <- ggplot(threetrait)+
aes(x=pos/1E6, y=trait)+
theme_bw() +
viridis::scale_fill_viridis(name = "LOD") + viridis::scale_color_viridis(name = "LOD") +
geom_segment(aes(x = ci_l_pos/1e6, y = trait, xend = ci_r_pos/1e6, yend = trait, color = lod), size = 2, alpha = 1) +
geom_segment(data=newrows,aes(x = 0, y = trait, xend = ci_r_pos/1e6, yend = trait), size = 2.5, alpha = 0) +
geom_point(aes(fill=lod),colour = "black",size = 2, alpha = 1, shape = 21)+
xlab("Genomic Position (Mb)") + ylab("") +
theme(axis.text.x = element_text(size=textsize, face="bold", color="black"),
axis.ticks.y = element_blank(),
legend.title = element_text(size = titlesize, face = "bold"), legend.text = element_text(size = textsize),
legend.key.size = unit(.75, "cm"),
panel.grid.major.x = element_line(),
panel.grid.major.y = element_blank(),
panel.grid.minor.y = element_blank(),
axis.text.y = element_blank(),
axis.title.x = element_text(size=titlesize, face="bold", color= "black"),
axis.title.y = element_blank(),
strip.text.x = element_text(size=titlesize, face="bold", color="black"),
strip.text.y = element_text(size=titlesize, face="bold", color="black", angle = 0),
strip.background = element_rect(colour = "black", fill = "white", size = 0.75, linetype = "solid"),
plot.title = element_text(size=titlesize, face="bold")) +
facet_grid(condition ~ chr, scales = "free_x", space = "free")
unique_all
??readSorter
